#!/bin/gawk -f

# Looks for taxonomic names from list A ("Query set") in list B
# ("Reference set") matching them at different "quality levels", and
# optionally doing fuzzy matching using the aregex Gawk extension

# (c) Cam Webb, 2018
# Licence: GPL 3

## Dependencies:
# 1. GNU gawk v.4+
# 2. aregex Gawkextlib extension, for the amatch() version

## Conventions:
# Variables shared among functions and main BEGIN{} start with Capital letters


#@> @load "aregex"
#   @include "taxon-tools.awk"  # for depunct(); Make sure AWKPATH is set
#   2020-07-27: depunct now in the file

BEGIN{
  config()
  read_args()

  # Read manual choices from prior run, if given
  if (OLDfn)
    read_old(OLDfn)
  
  # Read reference names
  read_data(Bfn)

  # Read query names
  read_data(Afn)

  # Main loop though the lines of input file A
  for (line = 1; line <= Lines[Afn]; line++) {
    # ac is the given code associated with a name 
    ac = C[Afn, line]

    # test for exact string match:
    if (test_eq("exact",   ac)) continue

    # test for exact non-punctuation character match:
    if (test_eq("punct",   ac)) continue

    # if no author in A and only one author in B, make this default match:
    if (NA[ac] && NOAUTHONE && (test_na(ac))) continue

    # start on author variations, first a missing basionym:
    if (test_pm("basio",   ac)) continue

    # a missing 'in ...':
    if (test_pm("in",    ac)) continue

    # a missing 'ex ...' or 'in ...':
    if (test_pm("exin",    ac)) continue

    # both missing basionym or ex/in:
    if (test_eq("basexin", ac)) continue

    # infraspecific rank difference
    if (test_eq("irank", ac)) continue

    # bypass manual when A is 'auct.':
    if (Auct[ac]) {
      if (CFO) { 
        if (test_eq("cfonly",    ac)) continue
      }
      else {
        no_match(ac)
        continue
      }
    }

    # ALL fuzzy matching:
    if (ALLFUZZY && GL[Bfn][G[ac]])
      if (test_allfuzzy(ac)) continue
    
    # fuzzy matching and manual checking:
    if (FUZZY && GL[Bfn][G[ac]])
      if (test_fuzzy(ac, line)) continue

    # canonoical form only (g + s + ssp)
    # NB: there will probably be many possible matches; only one will return
    if (CFO)
      if (test_eq("cfonly",    ac)) continue

    #default
    no_match(ac)
  }

  exit 0
}

function config() {
  FS = "|"
  OFS= "|"
  PROCINFO["sorted_in"] =  "@ind_str_asc"
  FUZZERR = 5

  # Column order; same in both files
  I_code = 1 ; I_xg = 2  ; I_g = 3  ; I_xs = 4 ; I_s = 5
  I_st = 6   ; I_ssp = 7 ; I_a = 8 
}

function read_args(    arg) {
  # Read arguments, check, give usage
  # Note: add -d or -L as first option to do gawk dump or lint
  # Note: since -b is a Gawk arg, it is not found if it is the first arg.
  for (arg = 1; arg < ARGC; arg++) {
    if      (ARGV[arg] == "-a") Afn = ARGV[arg+1]
    else if (ARGV[arg] == "-b") Bfn = ARGV[arg+1]
    else if (ARGV[arg] == "-o") OUTFILE  = ARGV[arg+1]
    else if (ARGV[arg] == "-f") FUZZY    = 1
    else if (ARGV[arg] == "-F") ALLFUZZY    = 1
    else if (ARGV[arg] == "-e") FUZZERR  = ARGV[arg+1]
    else if (ARGV[arg] == "-1") NOAUTHONE  = 1
    else if (ARGV[arg] == "-c") CFO = 1
    else if (ARGV[arg] == "-n") APPEND  = 1
    else if (ARGV[arg] == "-q") QUIET  = 1
    else if (ARGV[arg] == "-m") OLDfn = ARGV[arg+1]
  }
  if (!Afn || !Bfn || !OUTFILE || ARGC == 1 || ((FUZZY) && (ALLFUZZY))) {
    print "Usage:    match_names -a query_names_file -b " \
      "ref_names_file -o outfile \\\n" \
      "            [ -f | -F [ -e fuzz_error ]] [ -1 -c -n -q ] " \
      "[ -m manual_choices ]"
    exit 1
  }

  # Delete existing OUTFILE
  if (!APPEND) {
    ## changed, for portability to windows
    # system("rm -f " OUTFILE)
    printf "" > OUTFILE
    close(OUTFILE)
  }
}

function read_old(filename ) {

  while ((getline < filename) > 0) {
    OldOptions[$1] = $2
    OldChoice[$1] = $3
    OldLevel[$1] = $4
  }  close(filename)
  
}

function read_data(filename,     i, nameN, namex) {
  
  while ((getline < filename) > 0) {
    # clean fields of spaces and NULL symbols
    for (i = 1; i <= NF; i++) {
      gsub(/^(NULL|\\N)$/,"",$i)
      $i = cleanspaces($i)
    }

    # line number to code:
    C[filename, ++Lines[filename]] = $I_code
    
    # check for duplicate code
    if (++CodeN[filename][$I_code] > 1) {
      print "ID code '" $I_code "' in file '" filename "' is a duplicate..."
      exit 1
    }

    # For structured output
    Data[$I_code] = $I_xg OFS $I_g OFS $I_xs OFS $I_s OFS \
      $I_st OFS $I_ssp OFS $I_a
    
    # "exact" string for manual string matching
    X[filename, "exact", $I_code] = cleanspaces($I_xg " " $I_g " " $I_xs " "  \
           $I_s " " $I_st " " $I_ssp " " $I_a)
    XC[filename, "exact", X[filename, "exact", $I_code]] = $I_code
    # Check for duplicate name
    if (++nameN[X[filename, "exact", $I_code]] > 1) {
      print "Error: file " filename ", name '" X[filename, "exact", $I_code] \
        "' is a duplicate..."
      exit 1
    }
    
    namex = $I_xg $I_g $I_xs $I_s $I_st $I_ssp

    # NB: using computed regex here, less efficient, but tidier code
    # plain depunct
    apply_regex(filename, $I_code, namex, $I_a, "punct", "")

    # plain depunct no author
    if (!$I_a) NA[$I_code] = 1
    apply_regex(filename, $I_code, namex, "", "noauth", "") 
    XNA[filename, X[filename, "noauth", $I_code]]++

    # plain depunct no author no subtype no hybrid marks
    apply_regex(filename, $I_code, ($I_g $I_s $I_ssp), "", "cfonly", "") 

    # plain depunct no subtype 2019-05-14: included auth string
    apply_regex(filename, $I_code, ($I_xg $I_g $I_xs $I_s $I_ssp $I_a), "", \
                "irank", "") 

    # depunct, with basionym removed
    apply_regex(filename, $I_code, namex, $I_a, "basio", "^\\([^)]+\\)")

    # depunct with 'in' removed
    apply_regex(filename, $I_code, namex, $I_a, "in", \
                " [iI]n .*$")

    # depunct with 'ex' and/or 'in' removed
    apply_regex(filename, $I_code, namex, $I_a, "exin", \
                " ([eE]x|[iI]n) .*$")

    # depunct with basio and 'ex' or 'in' removed
    apply_regex(filename, $I_code, namex, $I_a, "basexin", \
                "(^\\([^)]+\\)| ([eE]x|[iI]n) .*$)")

    # auct?
    if ($I_a ~ /^auct\.?$/) Auct[$I_code] = 1

    # genus lookup
    G[$I_code] = $I_g
    # genus in Filename test
    GL[filename][$I_g] = 1
    # Genus hash table
    Gh[filename][$I_g][$I_code] = 1
  }
  close(filename)
}

function test_eq(method, code,      outmethod) {

  outmethod = method == "exact" ? "exact" : ( "auto_" method )
  # if there is a B code for the A key, using the same method
  if ((XC[Bfn, method, X[Afn, method, code]]) &&            \
      (code != XC[Bfn, method, X[Afn, method, code]]))    {
        print code, XC[Bfn, method, X[Afn, method, code]],      \
          outmethod , Data[code] ,                              \
      Data[XC[Bfn, method, X[Afn, method, code]]] >> OUTFILE
    close(OUTFILE)
    return 1
  }
  else return 0
}
 
function test_na(code) {

  # if there is a single B code for the A key
  if ((XC[Bfn, "noauth", X[Afn, "noauth", code]]) &&        \
      (XNA[Bfn, X[Afn, "noauth", code]] == 1)     &&        \
      (code != XC[Bfn, "noauth", X[Afn, "noauth", code]])) {
    print code, XC[Bfn, "noauth", X[Afn, "noauth", code]],       \
      "auto_noauth" , Data[code] ,                               \
      Data[XC[Bfn, "noauth", X[Afn, "noauth", code]]] >> OUTFILE
    close(OUTFILE)
    return 1
  }
  else return 0
}

function test_pm(method, code) {
  # pm = 'plus/minus'
  # if there is a B code for the collapsed A key
  if ((XC[Bfn, method, X[Afn, "punct", code]]) &&               \
      (code != XC[Bfn, method, X[Afn, "punct", code]]))    {
    print code, XC[Bfn, method, X[Afn, "punct", code]],                \
      "auto_" method "-" , Data[code] ,                                \
      Data[XC[Bfn, method, X[Afn, "punct", code]]] >> OUTFILE
    close(OUTFILE)
    return 1
  }
  
  # if there is a collapsed B code for the A key
  else if ((XC[Bfn, "punct", X[Afn, method, code]]) &&          \
           (code != XC[Bfn, "punct", X[Afn, method, code]])) {
    print code, XC[Bfn, "punct", X[Afn, method, code]],            \
      "auto_" method "+" , Data[code] ,                            \
      Data[XC[Bfn, "punct", X[Afn, method, code]]] >> OUTFILE
    close(OUTFILE)
    return 1
  }
  else return 0
}

function apply_regex(AB, code, name, auth, method, regex,   i) {

  gsub(regex, "", auth)
  X[AB, method, code] = depunct(name auth)
  XC[AB, method, X[AB, method, code]] = code
  # check for possible duplicate keys. The used match will be the first one
  if ((++XN[AB, method, X[AB, method, code]] > 1) && \
      (method !~ /(noauth|cfonly|irank)/) && (!QUIET)) {
    print "Warning: " code  \
        " has duplicate " method " form:\n           "  X[AB, method, code]
    # inefficient, but seldom called
    for (i in CodeN)
      if ((X[AB, method, i] == X[AB, method, code]) && (i != code))
        print "   with: " i 
  }
}

function cleanspaces(x) {
  # X is an external variable
  gsub(/  */," ", x)
  gsub(/ *$/, "" , x)
  gsub(/^ */, "" , x)
  return x
}

function no_match(code) {
  print code "||no_match|" Data[code] "|||||||" \
        >> OUTFILE
  close(OUTFILE)
}

function test_fuzzy(code, lineno,   i, j, r, found, nfound, mantype, \
                    noptions, option, optionsmatched) {

  # Old Agrep method : see commit 18e82ad26f436e1be988102b17680f27906781a5

  # New amatch() method:
  nfound = 0
  # for each B file code present in the same genus as (A) code
  for (i in Gh[Bfn][G[code]]) {
    if (i != code) {
      if (levenshtein(X[Bfn,"punct",i], X[Afn,"punct",code]) <= FUZZERR) #@<
      #@> if (amatch(X[Bfn,"punct",i], ("^" X[Afn,"punct",code] "$"),FUZZERR))
        found[++nfound] = i
    }
  }
  # Todo, add another array and sort it: the potential matches are in order
  
  # If there was an match, list match(s)  
  if (nfound) {

    # (2022-03-18: can't remember why this was added. Investigate:)
    # catch and remove cases of only one agrep match,
    #       and remove cases when one is a sp and one is subsp,
    if (nfound == 1)
      if ((gensub(/(var|subsp)/, "", "G", X[Bfn, "punct", found[1]]) == \
           gensub(/(var|subsp)/, "", "G", X[Afn, "punct", code])) ||
          ((X[Bfn, "exact", found[1]] ~ / (var|subsp|f)\. /) && \
           (X[Afn, "exact", code]    !~ / (var|subsp|f)\. /)) || \
          ((X[Bfn, "exact", found[1]] !~ / (var|subsp)\. /) && \
           (X[Afn, "exact", code]    ~ / (var|subsp)\. /)))
        # no_match(code)
        return 0

    # New 2022-03-18: bypass if there was a previous decision, huge time saver
    if (OldOptions[code]) {
      noptions = split(OldOptions[code], option, "^")
      optionsmatched = 0
      for (j = 1; j <= nfound; j++)
        for (k in option)
          if (found[j] == option[k]) optionsmatched++
      # if each of found[j] matchs each of the previous options (not in order) 
      if ((nfound == noptions) && (nfound == optionsmatched)) {
        if (OldLevel[code] == "no_match")
          print code , "" , "no_match", Data[ code ], "||||||" >> OUTFILE
        else 
          print code , OldChoice[code] , OldLevel[code], \
            Data[ code ], Data[OldChoice[code]] >> OUTFILE
        close(OUTFILE)
        printf "-------------------------------"                        \
          "------------------ %-15s--(%4d/%4d)\n", code, lineno, Lines[Afn]
        printf "    %s\n", X[Afn, "exact", code]
        printf "  * %-66s\n", X[Bfn, "exact", OldChoice[code]]
        return 1
      }
    }
    
    printf "-------------------------------"                        \
      "------------- %-20s--(%4d/%4d)\n", code, lineno, Lines[Afn]
    printf "    %s\n", X[Afn, "exact", code]
    
    # for (j = 1; j <= na; j++) {
    #   split(a[j],b," ")
    #   printf "%2d: %s\n", j, X[Bfn, "exact", XC[Bfn,"punct", b[2]]]
    #   code_of_j[j] = b[1]
    # }

    for (j = 1; j <= nfound; j++)
      printf "%2d: %s\n", j, X[Bfn, "exact", found[j]]
      
    # Begin user input
    while(1) {
      r = ""
      printf "  > "
      getline r < "-"
      
      if (r == "q") {
        print "Halting... " lineno - 1 " lines of '" Afn "' processed" 
        exit 0
      }
      # See the codes being compared
      else if (r == "c") {
        printf "    %20s vs. %-20s\n", code , found[1] # code_of_j[1]
        for (j = 2; j <= nfound; j++)
          printf "    %20s vs. %-20s\n", "", found[j] # code_of_j[j]
      }
      # on getting a number for the correct match
      # else if (code_of_j[r]) {
      #   print code , code_of_j[r], "manual" , Data[ code ], \
      #     Data[code_of_j[r]]                                \
      #     >> OUTFILE
      #   close(OUTFILE)
      #   break
      # }
      else if (r == "e") {
        # New 2022-03-18
        recorderline = code "|"
        for (j = 1; j <= nfound; j++)
          recorderline = recorderline found[j] "^"
        gsub(/\^$/,"", recorderline)
        recorderline = recorderline "||no_match"
        print recorderline >> ( OUTFILE "_manual" )
        close(OUTFILE "_manual")

        break
      }
      else if (r ~ /[0-9]+e*/) {
        if (match(r, /ee/)) mantype = "manual??"
        else if (match(r, /e/)) mantype = "manual?"
        else mantype = "manual"
        gsub(/e*/,"",r)
        if (found[r]) {
          print code , found[r], mantype , Data[ code ],    \
            Data[found[r]] >> OUTFILE
          close(OUTFILE)

          # New 2022-03-18
          recorderline = code "|"
          for (j = 1; j <= nfound; j++)
            recorderline = recorderline found[j] "^"
          gsub(/\^$/,"", recorderline)
          recorderline = recorderline "|" found[r] "|" mantype
          print recorderline >> ( OUTFILE "_manual" )
          close(OUTFILE "_manual")

          return 1
        }
        else printf "(number not found)\n"
      }
      else if (r == "h") {
        print "   1   : Smith <> J. Smith; Smi. <> Sm.; species Smith <> "\
          "speciies Smith"
        print "   1e  : Jones <> Smith ex Jones or (Smith) Jones; " \
          "Smith <> Smith ex Jones;\n         Smith <> Smith & Jones"
        print "   1ee : J. Smith <> D. Smith; " \
           "Jones <> Smith & Jones;\n         " \
           "var. x Sm. <> ssp. x Sm.; auct."
        print "   e   : Smith <> (Smith) Jones; (Sm.) Blogs <> (Sm.) Jones;"
      }
      else printf "(try again... q = abort, e = no match, c = codes; " \
             " h = help; 1-9+ = pick)\n"
    }
    # delete a ; delete b ; delete code_of_j
    delete found # not always reached, if match is found
  }
  else return 0
  # else no_match(code)
}

function test_allfuzzy(code,    i, foundone) {
  # Return all fuzzy matches; output file may have more lines that listA

  # for each B file code present in the same genus as (A) code
  for (i in Gh[Bfn][G[code]]) {
    if (i != code ) {
      if (levenshtein(X[Bfn,"punct",i], X[Afn,"punct",code]) <= FUZZERR) { #@<
      #@> if (amatch(X[Bfn,"punct",i], ("^" X[Afn, "punct",code] "$"),FUZZERR)) {
        foundone = 1
        print code , i, "auto_fuzzy" , Data[ code ], Data[i] >> OUTFILE
        close(OUTFILE)
      }
    }
  }
  if (foundone) return 1
  else return 0
}


function levenshtein(i1, i2,    \
         s1, s2, s1len, s2len, x, y, lastdiag, olddiag, column) {
  # Returns the Levenshtein distance between two strings, with insert, delete
  #   and substitute costs of 1. 
  # Adapted from the C code at: https://en.wikibooks.org/w/index.php?\
  #   title=Algorithm_Implementation/Strings/Levenshtein_distance

  split(i1, s1, "")
  split(i2, s2, "")
  s1len = length(s1)
  s2len = length(s2)
  for (y = 1; y <= s1len; y++)
    column[y] = y
  for (x = 1; x <= s2len; x++) {
    column[0] = x
    lastdiag = x-1
    for (y = 1 ; y <= s1len; y++) {
      olddiag = column[y]
      column[y] = min3(column[y] + 1,   \
                       column[y-1] + 1, \
                       lastdiag + (s1[y-1] == s2[x-1] ? 0 : 1) )
      lastdiag = olddiag
    }
  }
  return column[s1len]
}

function min3(a, b, c) {
  # Helper function for levenshtein()
  return (a < b ? (a < c ? a : c) : (b < c ? b : c))
}

function depunct(x) {
  # Removes punctuation and flattens diacritics

  # History:
  #  The master copy of this library was in share/taxon-tools.awk
  #  2020-07-27: copied directly here. Unchanged.
  
  # See here for data:
  # https://code.activestate.com/recipes/251871-latin1-to-ascii-the-
  #   unicode-hammer/
  # https://stackoverflow.com/questions/1382998/latin-1-to-ascii#1383721
  gsub(/[ùúûü]/,"u", x)
  gsub(/[Ñ]/,"N", x)
  gsub(/[ÀÁÂÃÄÅ]/,"A", x)
  gsub(/[ìíîï]/,"i", x)
  gsub(/[ÒÓÔÕÖØ]/,"O", x)
  gsub(/[Ç]/,"C", x)
  gsub(/[æ]/,"ae", x)
  gsub(/[Ð]/,"D", x)
  gsub(/[ýÿ]/,"y", x)
  gsub(/[ÈÉÊË]/,"E", x)
  gsub(/[ñ]/,"n", x)
  gsub(/[àáâãäå]/,"a", x)
  gsub(/[òóôõöø]/,"o", x)
  gsub(/[ß]/,"b", x)
  gsub(/[ÙÚÛÜ]/,"U", x)
  gsub(/[Þþ]/,"p", x)
  gsub(/[çč]/,"c", x)
  gsub(/[ÌÍÎÏ]/,"I", x)
  gsub(/[ð]/,"d", x)
  gsub(/[èéêë]/,"e", x)
  gsub(/[Æ]/,"Ae", x)
  gsub(/[Ý]/,"Y", x)

  # # for using "agrep -w" there can only be alphanumerics and underscore.
  # # the only key non-punct characters to maintain are "()" and "&"
  # 2019-11-11: no! ( and ) are regex symbols! Not a problem if they are
  # balanced (because there's no | in between), but if one is missing, the
  # regex is flawed. Need to convert these two.
  gsub (/[()]/,"_",x)
  # gsub (/(\ and\ |&)/,"_",x)
  # test: if (x ~ /[^A-Za-z0-9_]/) print "Warning: non al-num in x: " x

  gsub (/ (and|et.?)  /," \\& ", x)

  # Now delete spaces and periods, and all other punctuation other than ()&×:
  gsub(/[^A-Za-z0-9()&×]/,"", x)
  # [ was gsub(/[ .]/,"", x) ; gsub(/"/,"", x) ]

  # test
  x = tolower(x)
  if (x ~ /[^a-z&]×/) print "Warning: non 'a-z&' in x: " x
  return x
}

